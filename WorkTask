1. Придумать свою предметную область и продумать схему БД для неё.

2. Выделить функциональные требования к вашей БД.

3. Реализовать реляционную БД для своей предметной области(все таблицы должны быть не менее чем в третьей нормальной форме)

Критерии к БД:
    1. БД должна быть в третьей нормальной форме или выше; \/
    2. Минимальное количество таблиц – 4; \/
    3. Все подключения из GUI должны осуществляться выделенным, не root, пользователем; - ВЫПОЛНЯЕТСЯ
    4. Должен существовать как минимум один индекс, созданный вами по выбранному текстовому не ключевому полю; \/
    5. В одной из таблиц должно присутствовать поле, заполняемое/изменяемое только триггером - ВЫПОЛНЯЕТСЯ

Реализовать программу GUI со следующим функционалом:
    1. Создание/удаление базы данных \/
    2. Создание/удаление таблиц \/
    3. Заполнение таблиц изначальными данными \/
    4. Вывод содержимого таблиц - ВЫПОЛНЯЕТСЯ
    5. Очистка(частичная - одной, и полная - всех) таблиц - ВЫПОЛНЯЕТСЯ
    6. Добавление новых данных - ВЫПОЛНЯЕТСЯ
    7. Поиск по заранее выбранному (вами) текстовому не ключевому полю
    8. Обновление кортежа
    9. Удаление по заранее выбранному текстовому не ключевому полю - ВЫПОЛНЯЕТСЯ
    10. Удаление конкретной записи, выбранной пользователем  - ВЫПОЛНЯЕТСЯ

Все функции должны быть реализованы как хранимые процедуры.

В качестве отчёта от вас ожидается: описание вашей предметной области, требования, схема бд(с пояснением в какой НФ она находится и почему), исходный код( и демонстрация работы вашего приложения
====================================================

ОФОРМЛЕНИЕ:
1. В классе DB новые методы называть как procedure_smth_smth
2. Для подключения к БД создаем одного пользователя с именем lib и паролем lib1234

====================================================

ЗАДАЧИ(Возникшие проблемы писать в "КОСЯКИ"):
КРИСТИНА
1. Написать функции вывода таблиц в файл function.py. Описать ее в function.py. Реализовать автоматическое добавление этой процедуры в любую БД, при ее создании.
2. Реализовать метод add_export. Логика такая: Выдаем книгу только в том случае, если она есть в библиотеки(поле presence в бибилиотеки = True), иначе не выдаем.
   После выдачи это поле становится False. В то время как presence в таблице reader становится True.
3. Подумать, можно ли реализовать триггер в таблице export. Как ты хотела изначально. Если можно, то реализовать. Иначе придумать реализацию без триггера.
НИКИТА
1. Модернизировать процедуру add_reader. Описать ее в procedure.py. Реализовать автоматическое добавление этой процедуры в любую БД, при ее создании.
2. Реализовать процедуру очистки таблиц(задание 5). Описать ее в procedure.py. Реализовать автоматическое добавление этой процедуры в любую БД, при ее создании.
3. Реализовать удаление конкретной записи(задание 10). Не забыть сделать CASCADE. Описать ее в procedure.py. Реализовать автоматическое добавление
   этой процедуры в любую БД, при ее создании. Удалять можем из любой таблицы любую запись.
АНТОН
1. Модернизировать процедуру add_book. Описать ее в procedure.py. Реализовать автоматическое добавление этой процедуры в любую БД, при ее создании. \/
2. Реализовать триггер на поле amount_book в таблице author. Описать его. Реализовать автоматическое добавление. \/
3. Реализовать удаление по заранее выбранному текстовому не ключевому полю(задание 9).  Описать ее в procedure.py.
   Реализовать автоматическое добавление этой процедуры в любую БД, при ее создании. \/

====================================================

ОБЩАЯ ЛОГИКА. ОБ ЭТОМ СТОИТ ПОМНИТЬ, КОГДА ДЕЛАЕТЕ ЗАДАЧИ.
Предполагается, что
1. Поле amount_book таблицы book - триггер. То есть при добавлении книги или при удалении книги поле amount_book возрастает или уменьшается.
2. Возможно будет триггер на таблицу export.

====================================================
КОСЯКИ и ЗАМЕЧАНИЯ:
1. Когда добавляем 4 таблицы, а потом еще раз их же добавляем(два раза жмем на кнопку Create library tables) все ломается
2. Подумать, куда можно засунуть create_databse и delete_database из кода.
3 ВОЗМОЖНО СТОИТ УБРАТЬ if

